plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
    id "me.shedaniel.unified-publishing" version "0.1.+"
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

repositories {
    maven { url "https://maven.neoforged.net/releases/" }
    maven {
        name 'Maven for PR #794' // https://github.com/neoforged/NeoForge/pull/794
        url 'https://prmaven.neoforged.net/NeoForge/pr794'
        content {
            includeModule('net.neoforged', 'neoforge')
            includeModule('net.neoforged', 'testframework')
        }
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:${rootProject.neoforge_version}"

    modImplementation include(name: "libbamboo", group: "mod.crend.libbamboo", version:"${project.libbamboo_version}-neoforge")

    modCompileOnly (name: "autohud", group: "mod.crend.autohud", version: "${project.autohud_version}-neoforge")

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand(project.properties)
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set("neoforge")
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

unifiedPublishing {
    project {
        displayName = "[NeoForge ${rootProject.supported_versions_string}] ${rootProject.mod_name} ${rootProject.mod_version}"
        version = "${rootProject.mod_version}+${rootProject.minecraft_version}-neoforge"
        changelog = "${rootProject.changelog}"
        releaseType = "${rootProject.release_type}"
        gameVersions = List.of(project.supported_versions.split(';'))
        gameLoaders = ["neoforge"]

        mainPublication tasks.remapJar

        relations {
            optional {
                curseforge = "yacl"
                modrinth = "yacl"
            }
        }

        if (System.getenv("CURSEFORGE_TOKEN")) {
            curseforge {
                token = System.getenv("CURSEFORGE_TOKEN")
                id = rootProject.curseforge_id
            }
        }

        if (System.getenv("MODRINTH_TOKEN")) {
            modrinth {
                token = System.getenv("MODRINTH_TOKEN")
                id = rootProject.modrinth_id
            }
        }
    }
}

rootProject.tasks.named("publishMod").get().dependsOn tasks.named("publishUnified")
