plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
    id "me.shedaniel.unified-publishing" version "0.1.+"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

repositories {
    maven { url "https://maven.terraformersmc.com/" }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"

    modImplementation fabricApi.module("fabric-api-base", project.fabric_api_version)
    modImplementation fabricApi.module("fabric-convention-tags-v1", project.fabric_api_version)
    modImplementation fabricApi.module("fabric-client-tags-api-v1", project.fabric_api_version)
    modImplementation fabricApi.module("fabric-key-binding-api-v1", project.fabric_api_version)

    modRuntimeOnly "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"

    modImplementation "dev.isxander:yet-another-config-lib:${project.yacl_version}-fabric"
    modImplementation include(name: "libbamboo", group: "mod.crend.libbamboo", version: "${project.libbamboo_version}-fabric")
    modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"

    modCompileOnly("curse.maven:mythic-mounts-${project.mythicmounts_version}") { transitive = false }

    modRuntimeOnly (name: "autohud", group: "mod.crend.autohud", version: "${project.autohud_version}-fabric")

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

    api(project(path: ":api-common", configuration: "namedElements")) { transitive false }
    api include(project(path: ":api-fabric", configuration: "namedElements")) { transitive false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand(project.properties)
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    injectAccessWidener = true
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set("fabric")
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
    duplicatesStrategy(DuplicatesStrategy.INCLUDE)
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

unifiedPublishing {
    project {
        displayName = "[Fabric ${rootProject.supported_versions_string}] ${rootProject.mod_name} ${rootProject.mod_version}"
        version = "${rootProject.mod_version}+${rootProject.minecraft_version}-fabric"
        changelog = "${rootProject.changelog}"
        releaseType = "${rootProject.release_type}"
        gameVersions = List.of(project.supported_versions.split(';'))
        gameLoaders = ["fabric"]

        mainPublication tasks.remapJar
        secondaryPublication(project(':api-fabric').tasks.remapJar.archiveFile)
        secondaryPublication(project(':api-fabric').tasks.sourcesJar.archiveFile)

        relations {
            depends {
                curseforge = "fabric-api"
                modrinth = "fabric-api"
            }
            optional {
                curseforge = "yacl"
                modrinth = "yacl"
            }
            optional {
                curseforge = "modmenu"
                modrinth = "modmenu"
            }
            optional {
                curseforge = "dynamic-crosshair-compat"
                modrinth = "dynamiccrosshaircompat"
            }
        }

        if (System.getenv("CURSEFORGE_TOKEN")) {
            curseforge {
                token = System.getenv("CURSEFORGE_TOKEN")
                id = rootProject.curseforge_id
            }
        }

        if (System.getenv("MODRINTH_TOKEN")) {
            modrinth {
                token = System.getenv("MODRINTH_TOKEN")
                id = rootProject.modrinth_id
            }
        }
    }
}

rootProject.tasks.named("publishMod").get().dependsOn tasks.named("publishUnified")
