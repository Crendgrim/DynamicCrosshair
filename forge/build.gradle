plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "me.shedaniel.unified-publishing" version "0.1.+"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {

    forge {
        mixinConfig "dynamiccrosshair-common.mixins.json"
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"

    implementation annotationProcessor("com.github.LlamaLad7.MixinExtras:mixinextras-common:${project.mixin_extras_version}")
    implementation(include("com.github.LlamaLad7.MixinExtras:mixinextras-forge:${project.mixin_extras_version}"))

    modImplementation include(name: "yaclx", group: "mod.crend.yaclx", version:"${project.yaclx_version}-forge")

    modCompileOnly (name: "autohud", group: "mod.crend.autohud", version: "${project.autohud_version}-forge")

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set("forge")
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

unifiedPublishing {
    project {
        displayName = "[Forge ${rootProject.supported_versions_string}] ${rootProject.mod_name} ${rootProject.mod_version}"
        version = "${rootProject.mod_version}+${rootProject.minecraft_version}-forge"
        changelog = "${rootProject.changelog}"
        releaseType = "${rootProject.release_type}"
        gameVersions = List.of(project.supported_versions.split(';'))
        gameLoaders = ["forge"]

        mainPublication tasks.remapJar

        relations {
            optional {
                curseforge = "yacl"
                modrinth = "yacl"
            }
        }

        if (System.getenv("CURSEFORGE_TOKEN")) {
            curseforge {
                token = System.getenv("CURSEFORGE_TOKEN")
                id = rootProject.curseforge_id
            }
        }

        if (System.getenv("MODRINTH_TOKEN")) {
            modrinth {
                token = System.getenv("MODRINTH_TOKEN")
                id = rootProject.modrinth_id
            }
        }
    }
}

rootProject.tasks.getByName("publishMod").dependsOn tasks.getByName("publishUnified")
