plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
}

architectury {
    common(rootProject.enabled_platforms.split(","))
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    // We depend on fabric loader here to use the fabric @Environment annotations and get the mixin dependencies
    // Do NOT use other classes from fabric loader
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modImplementation fabricApi.module("fabric-convention-tags-v1", project.fabric_api_version)

    modImplementation (name: "libbamboo", group: "mod.crend.libbamboo", version: "${project.libbamboo_version}-fabric")

    modCompileOnly (name: "autohud", group: "mod.crend.autohud", version: "${project.autohud_version}-fabric")

    modImplementation "dev.isxander:yet-another-config-lib:${project.yacl_version}-fabric"

    api(project(path: ":api-common", configuration: "namedElements"))
    shadowCommon(project(path: ":api-common", configuration: "transformProductionFabric")) { transitive false }
}
